package domb.rules;

import java.util.Set;

import function domb.rules.DroolsUtils.debugLhsValue;
import domb.app.model.vehicle.Failure;
import domb.app.model.vehicle.SensorValue;
import domb.app.model.enums.PartEnum;
import domb.app.model.enums.ExtremeType;


import domb.app.model.events.PartWarningEvent;
import domb.app.model.events.ExtremeAverageWarningEvent;
import domb.app.model.events.EssentialFixEvent;



rule "ENGINE WARNING"
  no-loop true
  when
    $newFailure: Failure(part == PartEnum.MAJOR_DRIVE_BELT || part == PartEnum.MAJOR_ENGINE_LUBRICATION) over window:length(1)
     
    and

    $previouesBeltFailures: Set() from accumulate(
        $previouesFailure: Failure(
            this != $newFailure,
            part == PartEnum.MAJOR_DRIVE_BELT,
            vehicleManufacturer == $newFailure.vehicleManufacturer,
            vehicleModel == $newFailure.vehicleModel,
            this before[1s, 30d] $newFailure 
        ), collectSet($previouesFailure)
    ) 
    
    and
    
    $previouesLubractionFailures: Set() from accumulate(
        $previouesLubricationFailure: Failure(
            this != $newFailure,
            part == PartEnum.MAJOR_ENGINE_LUBRICATION,
            vehicleManufacturer == $newFailure.vehicleManufacturer,
            vehicleModel == $newFailure.vehicleModel,
            this before[1s, 30d] $newFailure 
        ), collectSet($previouesLubricationFailure)
    ) 
    
    and

    eval($previouesBeltFailures.size() > 0 && $previouesLubractionFailures.size() > 0)
  then
    System.out.println("RULE EXECUTED: DETECTED ENGINE WARNING");
    insert(new PartWarningEvent(PartEnum.ENGINE_WARNING));

end

rule "EXTREME VALUE WARNING"
no-loop true
  when
    $newSensorValue: SensorValue( $sensorType : sensorType ) over window:length(1)
    
    and
    
    $sensorValues: Set() from accumulate(
      $sensorValue: SensorValue(
        sensorType == $sensorType 
      ), collectSet($sensorValue)
    )
    
    and
    
    eval($sensorValues.size() > 3)
    
    and

    $average: Number() from accumulate(
        $sensorValue: SensorValue() from $sensorValues,
        average( $sensorValue.getReading() )
    ) 
    
    and 
    
    eval($average.doubleValue() >= 220 || $average.doubleValue() < 100)
  then
    // uvescemo mape
    // za ovo ce biti napisana simulacija
    System.out.println("RULE EXECUTED: DETECTED EXTREME WARNING");
    boolean over = $average.doubleValue() >= 220;
    insert(new ExtremeAverageWarningEvent(over ? $average.doubleValue() - 220 : 100 - $average.doubleValue(), over ? ExtremeType.OVER : ExtremeType.UNDER, $sensorType));

end

rule "ESSENTIAL FIX"
no-loop true
  when
    $extremeAverageWarningEvent: ExtremeAverageWarningEvent( sensorType == "TEMPERATURE") and
    $partWarningEvent: PartWarningEvent( part == PartEnum.ENGINE_WARNING, this before[1s, 30d] $extremeAverageWarningEvent)
 
  then
    System.out.println("RULE EXECUTED: ESSENTIAL FIX ENGINE");
    //zabrana korisniku da dijagnozira kola preko korisnickog unosa, i upozorenje da hitno ide kod mehanicara
    insert(new EssentialFixEvent(PartEnum.ESSENTIAL_FIX_ENGINE));

end