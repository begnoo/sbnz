package domb.rules;

import function domb.rules.DroolsUtils.debugLhsValue;
import domb.app.model.vehicle.Failure;
import domb.app.model.enums.PartEnum;


rule "SquelingNoise -> DriveBelt"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 1  && answerValue == "The engine") 
  then
    System.out.println("RULE EXECUTED: DRIVE_BELT");
    modify($failure){
      setPart(PartEnum.DRIVE_BELT);
    }

end


rule "SquelingNoise -> DRIVE_BELT -> Continuing failure"
  no-loop true
  when
    $failure: Failure(part == PartEnum.DRIVE_BELT, $releatedFailures: releatedFailures)
    $count: Number(intValue > 4) from accumulate(
      $f: Failure(
        $t: this,
        part == PartEnum.DRIVE_BELT,
        used == false
      ) from $releatedFailures,
      count($t)
    ) 
  then
    System.out.println("RULE EXECUTED: MAJOR DRIVE_BELT FAILURE");
    modify($failure){
      // mozda dodati severety na failure
      setPart(PartEnum.MAJOR_DRIVE_BELT);
    }
end

rule "SquelingNoise -> DRIVE_BELT -> Continuing failure -> update used failures"
  no-loop true
  when
    $failure: Failure(part == PartEnum.MAJOR_DRIVE_BELT, $releatedFailures: releatedFailures)
  then
    System.out.println("RULE EXECUTED: UPDATE PREVIOUS DRIVE_BELTS");
    for (int i = 0; i < $failure.getReleatedFailures().size(); i++) {
      $failure.getReleatedFailures().get(i).setUsed(true);
    }
end


rule "SquelingNoise -> BreakPads"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 2  && answerValue == "Yes") 
  then
    System.out.println("RULE EXECUTED: SquelingNoise The Brakes");
    modify($failure){
      setPart(PartEnum.BREAK_PADS);
    }

end

rule "SquelingNoise -> None"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 2  && answerValue=="No") 
  then
    System.out.println("RULE EXECUTED: SquelingNoise The Brakes Normal");
    modify($failure){
      setPart(PartEnum.NONE);
    }

end

rule "P0300 -> No rough drive"
  no-loop true
when
  $failure: Failure(questionId == 6 && answerValue == "No")
then
  System.out.println("RULE EXECUTED: P0300 everything normal");
  modify($failure) {
    setPart(PartEnum.RESET_OBD);
  }
end

rule "P0300 -> rough drive -> not working spark plugs"
  no-loop true
when
  $failure: Failure(questionId == 7 && answerValue == "No")
then
  System.out.println("RULE EXECUTED: P0300 faulty spark plugs");
  modify($failure) {
    setPart(PartEnum.SPARK_PLUGS);
  }
end

rule "P0300 -> rough drive -> working spark plugs"
  no-loop true
when
  $failure: Failure(questionId == 7 && answerValue == "Yes")
then
  System.out.println("RULE EXECUTED: P0300 see mechanic");
  modify($failure) {
    setPart(PartEnum.UNKNOWN);
  }
end

rule "P0440 -> leakeage under vechicle"
  no-loop true
when 
  $failure: Failure(questionId == 8 && answerValue == "Yes")
then 
  System.out.println("RULE EXECUTED: faulty gas tank");
  modify($failure) {
    setPart(PartEnum.FUEL_TANK);
  }
end

rule "P0440 -> no leakeage under vechicle"
  no-loop true
when 
  $failure: Failure(questionId == 8 && answerValue == "No")
then 
  System.out.println("RULE EXECUTED: reset obd");
  modify($failure) {
    setPart(PartEnum.RESET_OBD);
  }
end

rule "P0440 -> faulty vapor sensor"
  no-loop true
when 
  $failure: Failure(questionId == 9 && answerValue == "Yes")
then 
  System.out.println("RULE EXECUTED: faulty vapor sensor");
  modify($failure) {
    setPart(PartEnum.VAPOR_SENSOR);
  }
end

rule "P0440 -> faulty vapor sensor"
  no-loop true
when 
  $failure: Failure(questionId == 9 && answerValue == "No")
then 
  System.out.println("RULE EXECUTED: see mechanic");
  modify($failure) {
    setPart(PartEnum.UNKNOWN);
  }
end

