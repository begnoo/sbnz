package domb.rules;

import function domb.rules.DroolsUtils.debugLhsValue;
import domb.app.model.vehicle.Failure;
import domb.app.model.enums.PartEnum;


rule "SquelingNoise -> DriveBelt"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 1  && answerValue == "The engine" && !used) 
  then
    System.out.println("RULE EXECUTED: DRIVE_BELT");
    modify($failure){
      setPart(PartEnum.DRIVE_BELT);
    }

end


rule "SquelingNoise -> DRIVE_BELT -> Continuing failure"
  no-loop true
  when
    $failure: Failure(part == PartEnum.DRIVE_BELT, $releatedFailures: releatedFailures)
    $count: Number(intValue > 2) from accumulate(
      $f: Failure(
        $t: this,
        part == PartEnum.DRIVE_BELT,
        used == false
      ) from $releatedFailures,
      count($t)
    ) 
  then
    System.out.println("RULE EXECUTED: MAJOR DRIVE_BELT FAILURE");
    modify($failure){
      // mozda dodati severety na failure
      setPart(PartEnum.MAJOR_DRIVE_BELT);
    }
end

rule "SquelingNoise -> DRIVE_BELT -> Continuing failure -> update used failures"
  no-loop true
  when
    $failure: Failure(part == PartEnum.MAJOR_DRIVE_BELT, $releatedFailures: releatedFailures)
  then
    System.out.println("RULE EXECUTED: UPDATE PREVIOUS DRIVE_BELTS");
    for (int i = 0; i < $failure.getReleatedFailures().size(); i++) {
      $failure.getReleatedFailures().get(i).setUsed(true);
    }
end


rule "SquelingNoise -> BreakPads"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 2  && answerValue == "Yes" && !used) 
  then
    System.out.println("RULE EXECUTED: SquelingNoise The Brakes");
    modify($failure){
      setPart(PartEnum.BREAK_PADS);
    }

end

rule "SquelingNoise -> None"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 2  && answerValue=="No" && !used) 
  then
    System.out.println("RULE EXECUTED: SquelingNoise The Brakes Normal");
    modify($failure){
      setPart(PartEnum.NONE);
    }
end


rule "Smells Like -> Rotten eggs -> Yes"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 19  && answerValue=="Yes" && !used) 
  then
    System.out.println("RULE EXECUTED: AIR_FILTER");
    modify($failure){
      setPart(PartEnum.AIR_FILTER);
    }
end

rule "Smells Like -> Rotten eggs -> No"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 19  && answerValue=="No" && !used) 
  then
    System.out.println("RULE EXECUTED: FUEL_INJECTION_SENSOR");
    modify($failure){
      setPart(PartEnum.FUEL_INJECTION_SENSOR);
    }
end

rule "Smells Like -> Muggy"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 18  && answerValue=="Muddy smell from A/C vents, along with poor cooling" && !used) 
  then
    System.out.println("RULE EXECUTED: DRAIN_PAN_AC");
    modify($failure){
      setPart(PartEnum.DRAIN_PAN_AC);
    }
end

rule "Steam -> under the hood"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 17  && answerValue=="From under the hood" && !used) 
  then
    System.out.println("RULE EXECUTED: RADIATOR_CAP");
    modify($failure){
      setPart(PartEnum.RADIATOR_CAP);
    }
end

rule "Steam -> exhaust"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 17  && answerValue=="From the exhaust" && !used) 
  then
    System.out.println("RULE EXECUTED: NONE_EXHAUST");
    modify($failure){
      setPart(PartEnum.NONE_EXHAUST);
    }
end


rule "TappingSound -> Oil Light -> Yes -> ENGINE_LUBRICATION"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 14  && answerValue=="Yes" && !used) 
  then
    System.out.println("RULE EXECUTED: TappingSound ENGINE_LUBRICATION");
    modify($failure){
      setPart(PartEnum.ENGINE_LUBRICATION);
    }

end

rule "TappingSound -> ENGINE_LUBRICATION -> Continuing failure"
  no-loop true
  when
    $failure: Failure(part == PartEnum.ENGINE_LUBRICATION, $releatedFailures: releatedFailures)
    $count: Number(intValue > 2) from accumulate(
      $f: Failure(
        $t: this,
        part == PartEnum.ENGINE_LUBRICATION,
        used == false
      ) from $releatedFailures,
      count($t)
    ) 
  then
    System.out.println("RULE EXECUTED: MAJOR_ENGINE_LUBRICATION FAILURE");
    modify($failure){
      // mozda dodati severety na failure
      setPart(PartEnum.MAJOR_ENGINE_LUBRICATION);
    }
end

rule "TappingSound -> ENGINE_LUBRICATION -> Continuing failure -> update used failures"
  no-loop true
  when
    $failure: Failure(part == PartEnum.MAJOR_ENGINE_LUBRICATION, $releatedFailures: releatedFailures)
  then
    System.out.println("RULE EXECUTED: UPDATE PREVIOUS ENGINE_LUBRICATION");
    for (int i = 0; i < $failure.getReleatedFailures().size(); i++) {
      $failure.getReleatedFailures().get(i).setUsed(true);
    }
end

rule "TappingSound -> Oil Light -> Low Oil Level -> Yes"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 15  && answerValue=="Yes" && !used) 
  then
    System.out.println("RULE EXECUTED: TappingSound ADD_OIL");
    modify($failure){
      setPart(PartEnum.ADD_OIL);
    }

end

rule "TappingSound -> Oil Light -> Low Oil Level -> No"
  lock-on-active true
  no-loop true
  when
    $failure: Failure(questionId == 15  && answerValue=="No" && !used) 
  then
    System.out.println("RULE EXECUTED: TappingSound LOOSE_VALVE");
    modify($failure){
      setPart(PartEnum.LOOSE_VALVE);
    }

end

rule "P0300 -> No rough drive"
  lock-on-active true
  no-loop true
when
  $failure: Failure(questionId == 6 && answerValue == "No" && !used)
then
  System.out.println("RULE EXECUTED: P0300 everything normal");
  modify($failure) {
    setPart(PartEnum.RESET_OBD);
  }
end

rule "P0300 -> rough drive -> not working spark plugs"
  lock-on-active true
  no-loop true
when
  $failure: Failure(questionId == 7 && answerValue == "No" && !used)
then
  System.out.println("RULE EXECUTED: P0300 faulty spark plugs");
  modify($failure) {
    setPart(PartEnum.SPARK_PLUGS);
  }
end

rule "P0300 -> rough drive -> working spark plugs"
  lock-on-active true
  no-loop true
when
  $failure: Failure(questionId == 7 && answerValue == "Yes" && !used)
then
  System.out.println("RULE EXECUTED: P0300 see mechanic");
  modify($failure) {
    setPart(PartEnum.UNKNOWN);
  }
end

rule "P0300 -> rough drive -> continuing spark plug failure"
  no-loop true
  when
    $failure: Failure(part == PartEnum.SPARK_PLUGS, $releatedFailures: releatedFailures)
    $count: Number(intValue > 2) from accumulate(
      $f: Failure(
        $t: this,
        part == PartEnum.SPARK_PLUGS,
        used == false
      ) from $releatedFailures,
      count($t)
    ) 
  then
    System.out.println("RULE EXECUTED: MAJOR spark plugs failure");
    modify($failure){
      // mozda dodati severety na failure
      setPart(PartEnum.MAJOR_SPARK_PLUGS);
    }
end

rule "P0300 -> rough drive -> sparks not working again"
  no-loop true
  when
    $failure: Failure(part == PartEnum.MAJOR_SPARK_PLUGS, $releatedFailures: releatedFailures)
  then
    System.out.println("RULE EXECUTED: update previous spark plugs");
    for (int i = 0; i < $failure.getReleatedFailures().size(); i++) {
      $failure.getReleatedFailures().get(i).setUsed(true);
    }
end

rule "P0440 -> leakeage under vechicle"
  lock-on-active true
  no-loop true
when 
  $failure: Failure(questionId == 8 && answerValue == "Yes" && !used)
then 
  System.out.println("RULE EXECUTED: faulty gas tank");
  modify($failure) {
    setPart(PartEnum.FUEL_TANK);
  }
end

rule "P0440 -> no leakeage under vechicle"
  lock-on-active true
  no-loop true
when 
  $failure: Failure(questionId == 8 && answerValue == "No" && !used)
then 
  System.out.println("RULE EXECUTED: reset obd");
  modify($failure) {
    setPart(PartEnum.RESET_OBD);
  }
end

rule "P0440 -> faulty vapor sensor"
  lock-on-active true
  no-loop true
when 
  $failure: Failure(questionId == 9 && answerValue == "Yes" && !used)
then 
  System.out.println("RULE EXECUTED: faulty vapor sensor");
  modify($failure) {
    setPart(PartEnum.VAPOR_SENSOR);
  }
end

rule "P0440 -> faulty vapor sensor -> UNKNOW"
  lock-on-active true
  no-loop true
when 
  $failure: Failure(questionId == 9 && answerValue == "No" && !used)
then 
  System.out.println("RULE EXECUTED: see mechanic");
  modify($failure) {
    setPart(PartEnum.UNKNOWN);
  }
end

rule "P0420 -> catalyzer"
  lock-on-active true
  no-loop true
when 
  $failure: Failure(questionId == 10 && answerValue == "Yes" && !used)
then
  System.out.println("RULE EXECUTED: catalyzer faulty");
  modify($failure) {
    setPart(PartEnum.CATALYZER);
  }
end

rule "P0420 -> vechicle starts"
  lock-on-active true
  no-loop true
when 
  $failure: Failure(questionId == 11 && answerValue == "Yes" && !used)
then
  System.out.println("RULE EXECUTED: reset OBD");
  modify($failure) {
    setPart(PartEnum.RESET_OBD);
  }
end

rule "P0420 -> faulty pump"
  lock-on-active true
  no-loop true
when 
  $failure: Failure(questionId == 11 && answerValue == "No" && !used)
then
  System.out.println("RULE EXECUTED: faulty fuel pump");
  modify($failure) {
    setPart(PartEnum.FUEL_PUMP);
  }
end

rule "P0171 -> pcv valve leaks -> PCV_LEAK"
  lock-on-active true
  no-loop true
when 
  $failure: Failure(questionId == 12 && answerValue == "Yes" && !used)
then
  System.out.println("RULE EXECUTED: faulty pcv valve");
  modify($failure) {
    setPart(PartEnum.PCV_LEAK);
  }
end

rule "P0171 -> maf faulty"
  lock-on-active true
  no-loop true
when 
  $failure: Failure(questionId == 13 && answerValue == "No" && !used)
then
  System.out.println("RULE EXECUTED: faulty maf sensor");
  modify($failure) {
    setPart(PartEnum.MAF);
  }
end

rule "P0171 -> pcv valve leaks -> RESET_OBD"
  lock-on-active true
  no-loop true
when 
  $failure: Failure(questionId == 13 && answerValue == "Yes" && !used)
then
  System.out.println("RULE EXECUTED: reset obd");
  modify($failure) {
    setPart(PartEnum.RESET_OBD);
  }
end
